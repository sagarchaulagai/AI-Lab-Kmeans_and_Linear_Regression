# -*- coding: utf-8 -*-
"""kmeans_clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14A8MDPOhh8h37s7ShzZrobF5minAGTpo
"""

import matplotlib.pyplot as plt
import random
import math

# Sample 2D data
data = [
    [1.0, 2.0],
    [1.5, 1.8],
    [5.0, 8.0],
    [8.0, 8.0],
    [1.0, 0.6],
    [9.0, 11.0],
    [8.0, 2.0],
    [10.0, 2.0],
    [9.0, 3.0]
]

# Euclidean distance
def distance(p1, p2):
    return math.sqrt(sum((x - y)**2 for x, y in zip(p1, p2)))

# Assign each point to the nearest centroid
def assign_clusters(data, centroids):
    clusters = [[] for _ in centroids]
    for point in data:
        dists = [distance(point, centroid) for centroid in centroids]
        cluster_index = dists.index(min(dists))
        clusters[cluster_index].append(point)
    return clusters

# Recalculate centroids as mean of assigned points
def compute_centroids(clusters):
    centroids = []
    for cluster in clusters:
        if cluster:
            centroid = [sum(dim) / len(cluster) for dim in zip(*cluster)]
        else:
            centroid = [0, 0]
        centroids.append(centroid)
    return centroids

# Plot the clusters and centroids
def plot_clusters(clusters, centroids, iteration):
    colors = ['r', 'g', 'b', 'c', 'm']
    plt.figure(figsize=(8, 6))
    for i, cluster in enumerate(clusters):
        xs, ys = zip(*cluster)
        plt.scatter(xs, ys, c=colors[i], label=f'Cluster {i+1}')
    for i, centroid in enumerate(centroids):
        plt.scatter(*centroid, c='k', marker='X', s=200, edgecolors='white', label=f'Centroid {i+1}')
    plt.title(f'K-Means Clustering - Iteration {iteration}')
    plt.legend()
    plt.grid(True)
    plt.show()

# K-Means Algorithm
def k_means(data, k=2, max_iters=10):
    # Random initial centroids from data points
    centroids = random.sample(data, k)

    for i in range(max_iters):
        clusters = assign_clusters(data, centroids)
        plot_clusters(clusters, centroids, iteration=i+1)
        new_centroids = compute_centroids(clusters)
        if new_centroids == centroids:
            break  # convergence
        centroids = new_centroids

    return centroids, clusters

final_centroids, final_clusters = k_means(data, k=2)